require('dotenv').config();
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const path = require('path');
const fs = require('fs-extra');
const session = require('express-session');
const ExcelProcessor = require('./services/ExcelProcessor');
const { requireAuth, checkCredentials, loginRateLimit } = require('./middleware/auth');

const app = express();
const PORT = process.env.PORT || 3000;

// Validate authentication configuration
if (!process.env.ADMIN_EMAIL || !process.env.ADMIN_PASSWORD_HASH || !process.env.SESSION_SECRET) {
  console.error('❌ Missing authentication configuration. Please check your .env file.');
  console.error('Required variables: ADMIN_EMAIL, ADMIN_PASSWORD_HASH, SESSION_SECRET');
  process.exit(1);
}

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    maxAge: 24 * 60 * 60 * 1000 // 24 hours
  }
}));
app.use(express.static('public'));

// Configure multer for file upload
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = 'uploads/';
    fs.ensureDirSync(uploadDir);
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: (req, file, cb) => {
    if (file.originalname.match(/\.(xlsx|xls)$/)) {
      cb(null, true);
    } else {
      cb(new Error('Only Excel files (.xlsx, .xls) are allowed!'), false);
    }
  }
});

const processor = new ExcelProcessor();

// Serve main page with auth info
app.get('/', (req, res) => {
  const indexPath = path.join(__dirname, '../public/index.html');
  let html = fs.readFileSync(indexPath, 'utf8');
  
  // Inject user info into HTML
  if (req.session && req.session.authenticated) {
    const userInfo = `
      <div class="user-info">
        <p>Welcome, ${req.session.userEmail}!</p>
        <a href="/logout" class="logout-btn">Logout</a>
      </div>
    `;
    html = html.replace('<div class="header">', `<div class="header">${userInfo}`);
  } else {
    const loginInfo = `
      <div class="login-required">
        <p>Please login to use the translator</p>
        <a href="/login" class="login-btn">Login</a>
      </div>
    `;
    html = html.replace('<div class="main-content">', `<div class="main-content">${loginInfo}`);
  }
  
  res.send(html);
});

// Login page
app.get('/login', (req, res) => {
  if (req.session && req.session.authenticated) {
    return res.redirect('/');
  }
  
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>Login - Excel AI Translator</title>
        <style>
            body { 
                font-family: 'Inter', Arial, sans-serif; 
                max-width: 400px; 
                margin: 50px auto; 
                padding: 20px; 
                background: #f8fafc;
                color: #1e293b;
            }
            .form-group { 
                margin-bottom: 20px; 
            }
            label { 
                display: flex;
                align-items: center;
                gap: 8px;
                margin-bottom: 8px; 
                font-weight: 500;
                color: #374151;
            }
            input { 
                width: 100%; 
                padding: 12px 16px; 
                box-sizing: border-box; 
                border: 2px solid #e5e7eb;
                border-radius: 8px;
                font-size: 16px;
                transition: border-color 0.2s ease;
                background: white;
            }
            input:focus {
                outline: none;
                border-color: #4f46e5;
                box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
            }
            .password-input-container {
                position: relative;
                display: flex;
                align-items: center;
            }
            .password-toggle {
                position: absolute;
                right: 12px;
                background: none;
                border: none;
                color: #6b7280;
                cursor: pointer;
                padding: 8px;
                border-radius: 4px;
                transition: color 0.2s ease;
                width: auto;
            }
            .password-toggle:hover {
                color: #4f46e5;
                background: rgba(79, 70, 229, 0.05);
            }
            .login-submit-btn { 
                width: 100%; 
                padding: 12px 20px; 
                background: linear-gradient(135deg, #4f46e5, #06b6d4);
                color: white; 
                border: none; 
                border-radius: 8px;
                cursor: pointer; 
                font-weight: 600;
                font-size: 16px;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
            }
            .login-submit-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            }
            .error { 
                color: #ef4444; 
                background: #fef2f2;
                padding: 12px;
                border-radius: 8px;
                border: 1px solid #fecaca;
                margin-top: 16px;
                font-size: 14px;
            }
            h2 {
                text-align: center;
                color: #1e293b;
                margin-bottom: 32px;
                font-weight: 700;
            }
        </style>
    </head>
    <body>
        <h2>Admin Login</h2>
        <form method="POST" action="/api/auth/login">
            <div class="form-group">
                <label><i class="fas fa-envelope"></i> Email:</label>
                <input type="email" name="email" required>
            </div>
            <div class="form-group">
                <label><i class="fas fa-lock"></i> Password:</label>
                <div class="password-input-container">
                    <input type="password" name="password" id="loginPassword" required>
                    <button type="button" class="password-toggle" onclick="togglePassword('loginPassword', this)">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
            </div>
            <button type="submit" class="login-submit-btn">
                <i class="fas fa-sign-in-alt"></i> Login
            </button>
        </form>
        <script>
            function togglePassword(inputId, button) {
                const input = document.getElementById(inputId);
                const icon = button.querySelector('i');
                
                if (input.type === 'password') {
                    input.type = 'text';
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                } else {
                    input.type = 'password';
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                }
            }
        </script>
        ${req.query.error ? `<div class="error">${req.query.error}</div>` : ''}
    </body>
    </html>
  `);
});

// Login endpoint with rate limiting
app.post('/api/auth/login', loginRateLimit, async (req, res) => {
  try {
    const { email, password } = req.body;
    
    if (!email || !password) {
      return res.redirect('/login?error=Email and password are required');
    }
    
    const isValid = await checkCredentials(email, password);
    
    if (isValid) {
      req.session.authenticated = true;
      req.session.userEmail = email;
      res.redirect('/');
    } else {
      res.redirect('/login?error=Invalid email or password');
    }
  } catch (error) {
    console.error('Login error:', error);
    res.redirect('/login?error=Authentication system error');
  }
});

// Logout endpoint
app.post('/api/auth/logout', (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error('Session destroy error:', err);
    }
    res.redirect('/');
  });
});

app.get('/logout', (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error('Session destroy error:', err);
    }
    res.redirect('/');
  });
});

// Protected translation endpoint - requires authentication
app.post('/api/translate', requireAuth, upload.single('excelFile'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No Excel file was uploaded' });
    }
    
    // Process the file
    const result = await processor.processExcelFile(req.file.path);
    
    // Delete uploaded file
    fs.removeSync(req.file.path);
    
    res.json({
      success: true,
      message: 'Translation completed successfully!',
      downloadUrl: `/api/download/${result.filename}`,
      stats: result.stats,
      user: req.session.userEmail 
    });

  } catch (error) {
    // Delete uploaded file in case of error
    if (req.file) {
      try {
        fs.removeSync(req.file.path);
      } catch (cleanupError) {
        // Ignore cleanup errors
      }
    }
    
    res.status(500).json({ 
      error: 'Error processing file',
      details: error.message 
    });
  }
});

// Protected download endpoint
app.get('/api/download/:filename', requireAuth, (req, res) => {
  const filePath = path.join(__dirname, '../output', req.params.filename);
  
  if (fs.existsSync(filePath)) {
    res.download(filePath, (err) => {
      if (err) {
        res.status(500).json({ error: 'Download error' });
      } else {
        // Delete file after 5 minutes
        setTimeout(() => {
          fs.remove(filePath).catch(() => {
            // Ignore cleanup errors
          });
        }, 5 * 60 * 1000);
      }
    });
  } else {
    res.status(404).json({ error: 'File not found' });
  }
});

// Test endpoint
app.get('/api/test', async (req, res) => {
  try {
    await processor.testConfiguration();
    res.json({ 
      success: true, 
      message: 'Configuration is OK!',
      authenticated: req.session && req.session.authenticated || false,
      user: req.session && req.session.authenticated ? req.session.userEmail : null
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API to check auth status
app.get('/api/auth/user', (req, res) => {
  if (req.session && req.session.authenticated) {
    res.json({
      authenticated: true,
      user: {
        email: req.session.userEmail
      }
    });
  } else {
    res.json({ authenticated: false });
  }
});

// Export app for use in other files if needed
module.exports = app;